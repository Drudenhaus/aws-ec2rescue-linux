# Copyright 2016-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You
# may not use this file except in compliance with the License. A copy of
# the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
#
# or in the "license" file accompanying this file. This file is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
# ANY KIND, either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

--- !ec2rlcore.module.Module
# Module document. Translates directly into an almost-complete Module object
name: !!str ex_remediation
path: !!str
version: !!str 1.0
title: !!str Example remediation module template
helptext: !!str |
  This module is a template and not intended to be run.
placement: !!str run
package:
  - !!str
language: !!str python
content: !!str |
  """
  This is a remediation module template. To use this template, follow the TODOs and add the required logic.

  Functions:
      detect_problem: checks for the presence of the issue this module addresses on the running system
      remediate_problem: attemps to remediate the issue this module addresses
      setup_config_dict: create and return dictionary with all the necessary variables for module execution.
      main: the main execution body

  Classes:
      None

  Exceptions:
      None
  """
  import os
  import sys

  # Add the root program directory to sys.path so libraried functions can be imported
  # when this module is directly invoked with the interpreter.
  if __name__ == "__main__":
      sys.path.insert(0, os.environ["EC2RL_CALLPATH"])

  from ec2rlcore.prediag import backup
  from ec2rlcore.prediag import restore
  import ec2rlcore


  def detect_problem():
      """
      Detects whether the problem is present on the running systems.

      Returns:
          (bool): whether the problem is present
      """
      # TODO add detection steps
      return True


  def remediate_problem():
      """
      Applies a series of steps to remediate the problem address in this module.

      Returns:
          (bool): whether the problem was successfully remediated
      """
      # TODO add remediation steps
      return True


  def setup_config_dict():
      """Create and return dictionary with all the necessary variables for module execution."""
      # BACKUP_DIR: directory containing file backups. When run via ec2rl, this is a subdirectory inside LOG_DIR.
      # LOG_DIR: directory containing ec2rl logs else a default location if not running through ec2rl.
      # BACKED_FILES: dict containing "original file path":"back up file copy path" key:pair values.
      sys_config_dict = {"BACKUP_DIR": "/var/tmp/ec2rl_{}/backup".format(__name__),
                         "LOG_DIR": "/var/tmp/ec2rl_{}".format(__name__),
                         "BACKED_FILES": dict()}
      # REMEDIATE: controls whether remediation is to be attempted. The default is to only perform detection.
      try:
          if os.environ["remediate"] == "True":
              sys_config_dict["REMEDIATE"] = True
              print("Remediation enabled.")
          else:
              sys_config_dict["REMEDIATE"] = False
              print("Remediation not enabled. To enable, rerun with the --remediate argument.")
      except KeyError:
          sys_config_dict["REMEDIATE"] = False
          print("Remediation not enabled. To enable, rerun with the --remediate argument.")

      try:
          sys_config_dict["BACKUP_DIR"] = os.path.join(os.environ["EC2RL_GATHEREDDIR"], "ssh")
      except KeyError:
          print("Environment variable EC2RL_GATHEREDDIR not set! Defaulting to {}".format(sys_config_dict["BACKUP_DIR"]))

      try:
          sys_config_dict["LOG_DIR"] = os.path.join(os.environ["EC2RL_LOGDIR"], "ssh")
      except KeyError:
          print("Environment variable EC2RL_LOGDIR not set! Defaulting to {}".format(sys_config_dict["LOG_DIR"]))

      # NOT_AN_INSTANCE: indicates whether the running system is an EC2 instance.
      # Useful if the module contains EC2-specific actions.
      if "notaninstance" in os.environ and os.environ["notaninstance"] == "True":
          sys_config_dict["NOT_AN_INSTANCE"] = True
      elif "notaninstance" in os.environ and os.environ["notaninstance"] == "False":
          sys_config_dict["NOT_AN_INSTANCE"] = False
      else:
          sys_config_dict["NOT_AN_INSTANCE"] = not ec2rlcore.prediag.is_an_instance()
      if sys_config_dict["NOT_AN_INSTANCE"]:
          print("Not running on an instance.")
      else:
          print("Running on an instance.")

      # TODO setup any additional required variables

      return sys_config_dict


  def main():
      """The main execution logic goes in this function."""
      # TODO fill in module description
      print("My module description goes here.")
      # TODO change URL to point to the module's documentation
      print("See https://github.com/awslabs/aws-ec2rescue-linux/blob/master/docs/modules/mymodule.md for "
            "further details")
      print("")

      sys_config_dict = setup_config_dict()
      # TODO fill in messages to match the problem being address by this module
      if detect_problem():
          print("Problem detected")
          if sys_config_dict["REMEDIATE"]:
              # TODO modify path to backup files that will be edited
              backup("/path/to/some/file", sys_config_dict["BACKED_FILES"], sys_config_dict["BACKUP_DIR"])
              print("Remediating...")
              if remediate_problem():
                  print("[SUCCESS] Problem remediated.")
              else:
                  print("[FAILURE] Failed to remediate problem.")
                  # TODO modify path to restore any edited files if the remediation fails
                  restore("/path/to/some/file", sys_config_dict["BACKED_FILES"])
          else:
              print("[FAILURE] Problem with a system component detected.")
              print("-- Describe manual remediation here: command to remediate goes here")
      else:
          print("[SUCCESS] No problem detected.")


  if __name__ == "__main__":  # pragma: no coverage
      try:
          main()
      except Exception as ex:
          print(ex)
          print("[WARN] module generated an exception and exited abnormally.")
          print("-- Review the logs to determine the cause of the issue.")
          sys.exit(0)
constraint:
  requires_ec2: !!str False
  domain: !!str os
  class: !!str diagnose
  distro: !!str do_not_run
  required: !!str
  optional: !!str
  software: !!str
  sudo: !!str True
  perfimpact: !!str False
  parallelexclusive: !!str
